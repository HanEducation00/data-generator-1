cyme_adapter.py

from .base_adapter import BaseAdapter
import os
import glob
import pandas as pd
import logging
import re

class CymeAdapter(BaseAdapter):
    def __init__(self, config):
        super().__init__(config)
        self.data_path = config.get('data_path')
        self.file_pattern = config.get('file_pattern', '*.txt')
        self.files = []
        self.current_file_index = 0
        self.current_data = None
        self.current_position = 0
        self.logger = logging.getLogger(__name__)
        
    def initialize(self):
        """Veri dosyalarını bul ve hazırla"""
        pattern = os.path.join(self.data_path, self.file_pattern)
        self.files = sorted(glob.glob(pattern))
        if not self.files:
            self.logger.error(f"No files found matching pattern: {pattern}")
            return False
        
        self.logger.info(f"Found {len(self.files)} files matching pattern: {pattern}")
        return self._load_next_file()
        
    def _load_next_file(self):
        """Sıradaki CYME dosyasını özel formata göre yükle"""
        if self.current_file_index < len(self.files):
            file_path = self.files[self.current_file_index]
            self.logger.info(f"Loading CYME file: {file_path}")
            
            try:
                # Dosyayı satır satır oku
                with open(file_path, 'r') as f:
                    lines = f.readlines()
                
                # Format satırını bul
                format_line = None
                data_lines = []
                
                for line in lines:
                    if line.startswith('FORMAT='):
                        format_line = line.strip().replace('FORMAT=', '')
                    elif not line.startswith('[') and len(line.strip()) > 0:
                        data_lines.append(line.strip())
                
                if not format_line:
                    self.logger.error(f"Format line not found in file: {file_path}")
                    self.current_file_index += 1
                    return self._load_next_file()
                
                # Sütun isimlerini al
                columns = format_line.split(',')
                
                # Veri satırlarını işle
                data = []
                for line in data_lines:
                    # İlk kısmı (meta verileri) ve değerleri ayır
                    parts = line.split(',')
                    
                    # Meta verilerin sayısını belirle (FORMAT satırındaki PHASE veya TOTAL'e kadar)
                    meta_count = columns.index('VALUES')
                    
                    # Meta veriler ve değerleri ayır
                    meta_data = parts[:meta_count]
                    values = parts[meta_count:]
                    
                    # Her değer için bir kayıt oluştur
                    for i, value in enumerate(values):
                        record = {}
                        
                        # Meta verileri ekle
                        for j, col in enumerate(columns[:meta_count]):
                            record[col] = meta_data[j] if j < len(meta_data) else None
                        
                        # Değer ve zaman indeksini ekle
                        record['VALUE'] = float(value) if value.replace('.', '', 1).isdigit() else value
                        record['TIME_INDEX'] = i
                        
                        # Kayıt ID'sini oluştur
                        record['RECORD_ID'] = f"{record.get('ID', 'unknown')}_{i}"
                        
                        data.append(record)
                
                # DataFrame oluştur
                self.current_data = pd.DataFrame(data)
                self.current_position = 0
                self.current_file_index += 1
                self.logger.info(f"Loaded {len(self.current_data)} records from {file_path}")
                return True
                
            except Exception as e:
                self.logger.error(f"Error loading file {file_path}: {str(e)}")
                self.current_file_index += 1
                return self._load_next_file()
        
        self.logger.info("No more files to load")
        return False
        
    def get_data(self, batch_size):
        """Belirtilen batch boyutunda veri al"""
        if self.current_data is None:
            return []
            
        records = []
        remaining = batch_size
        
        while remaining > 0:
            # Mevcut dosyadan veri al
            available = len(self.current_data) - self.current_position
            if available > 0:
                batch = min(available, remaining)
                end_pos = self.current_position + batch
                
                # DataFrame'den kayıtları al
                batch_df = self.current_data.iloc[self.current_position:end_pos]
                batch_records = batch_df.to_dict('records')
                records.extend(batch_records)
                
                self.current_position += batch
                remaining -= batch
            
            # Eğer mevcut dosya bittiyse ve daha veri gerekiyorsa, sonraki dosyaya geç
            if remaining > 0 and self.current_position >= len(self.current_data):
                if not self._load_next_file():
                    break  # Başka dosya kalmadı
        
        return records
        
    def has_more_data(self):
        """Daha fazla veri olup olmadığını kontrol et"""
        if self.current_data is not None and self.current_position < len(self.current_data):
            return True
        return self.current_file_index < len(self.files)




        
